<% @title_args = {name: @form.name, standardized: @form.standardized?} %>
<% content_for(:title_content) do %>
  <%# For some inexplicable reason, without this span,
      rspec ./spec/features/forms/form/item_edit_spec.rb:117 fails. Tried to isolate what it is,
      best I could figure out is that it's a combination of the padding and font size.
      Without one or the other, the spec fails. %>
  <% if Rails.env.test? %>
    <span style="display: inline-block; padding: 0.25em 0; font-size: 17pt">X</span>
  <% end %>
<% end %>

<div class="d-print-none">
  <div class="elmo-form-wrapper">
    <div id="action-links-and-modal">
      <%= Forms::IntegrityWarnings::Builder.new(@form) %>
      <%= ActionLinks::FormLinkBuilder.new(@form) %>
      <%= render("return_to_draft_modal") if @form.persisted? %>
    </div>
    <%= elmo_form_for(form) do |f| %>
      <%= f.base_errors %>

      <%= f.field(:name, required: true, read_only: cannot?(:rename, form)) %>
      <%= f.field(:status, content: form.status_with_icon) %>
      <% unless form.current_version.nil? %>
        <%= f.regenerable_field(:current_version_name,
              action: :increment_version, link_i18n_key: "form.increment_version",
              confirm: t("form.increment_version_warning")) %>
      <% end %>

      <% if admin_mode? %>
        <ul class="admin-stats">
          <li><%= t("attributes.copy_count") %>: <%= form.copy_count %></li>
          <li><%= t("activerecord.attributes.form.copy_responses_count") %>: <%= form.copy_responses_count %></li>
        </ul>
      <% end %>

      <% unless admin_mode? %>
        <div class="more-settings"><a href="#"><%= t("common.more_settings") %></a></div>
        <div class="setting-fields">
          <%= f.field(:minimum_version_id, partial: "minimum_version") unless form.minimum_version_id.nil? %>
          <%= f.field(:default_response_name) %>
          <%= f.field(:access_level, partial: "form_access_level") %>
          <%= f.field(:allow_incomplete, type: :check_box, read_only: form.published?) %>
          <%= f.field(:smsable, type: :check_box)  %>
          <div class="sms-fields">
            <%= f.field(:sms_relay, type: :check_box) %>
            <%= f.field(:recipient_ids, type: :select, multiple: true, prompt: false,
              options: sel_opts_from_objs(form.recipients), read_only_content: form.recipient_names) %>
            <%= f.field(:authenticate_sms, type: :check_box) %>
          </div>
        </div>
      <% end %>
      <div class="less-settings"><a href="#"><%= t("common.less_settings") %></a></div>
      <% unless read_only %>
        <div class="submit-buttons">
          <%= f.submit(class: "btn btn-primary") %>
          <% if form.persisted? && !form.live? && can?(:change_status, form) %>
            <%= f.submit(I18n.t("form.save_and_go_live"),
                  name: "save_and_go_live", class: "btn btn-secondary") %>
          <% end %>
        </div>
      <% end %>
    <% end %>
    <%= render("form_items_list") %>
  </div>
</div>

<%= render("print_format_tips_modal") %>

<%= javascript_doc_ready do %>
  <% unless admin_mode? %>
    new ELMO.Views.FormSettingsView(<%=json(
      recipient_options_url: possible_recipients_broadcasts_path
    )%>);
    new ELMO.Views.ReturnToDraftView(<%= json(keyword: t("form.return_to_draft.modal.override")) %>);
    new ELMO.Views.FormMinimumVersionView();
  <% end %>
  new ELMO.Views.PrintFormView();
  // Assigning view to variable for testing form items
  ELMO.formItemsView = new ELMO.Views.FormItemsView(<%=json(
    form_id: form.id,
    can_reorder: !read_only && can?(:reorder_questions, form)
  )%>);
<% end %>
